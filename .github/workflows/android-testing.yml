# =============================================================================
# Android Testing and Mobile Validation Pipeline
# =============================================================================
#
# This specialized workflow focuses exclusively on Android platform testing,
# providing comprehensive end-to-end validation of the MerkleKV Mobile
# application on real Android environments. The pipeline builds, deploys,
# and tests the Flutter demo application on Android emulators to ensure
# production readiness and cross-platform compatibility.
#
name: Android Testing & E2E Validation

# Trigger configuration for Android-specific testing
on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/flutter_demo/**'
      - 'packages/merkle_kv_core/**'
      - '**.dart'
      - 'melos.yaml'
      - 'pubspec*.yaml'
      - '.github/workflows/android-testing.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/flutter_demo/**'
      - 'packages/merkle_kv_core/**'
      - '**.dart'
      - 'melos.yaml'
      - 'pubspec*.yaml'
  workflow_dispatch:
    inputs:
      api_level:
        description: 'Android API Level'
        required: false
        default: '34'
        type: choice
        options:
          - '34'
          - '33'
          - '32'
          - '31'
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: true
        type: boolean

# Concurrency management
concurrency:
  group: android-testing-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# Security-conscious permissions
permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  FLUTTER_VERSION: '3.19.6'
  JAVA_VERSION: '17'
  API_LEVEL: ${{ github.event.inputs.api_level || '34' }}

jobs:
  # ===========================================================================
  # Android Testing Job with Comprehensive E2E Validation
  # ===========================================================================
  android-testing:
    name: 📱 Android E2E Testing (API ${{ github.event.inputs.api_level || '34' }})
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: false
          
      # -----------------------------------------------------------------------
      # Development Environment Setup
      # -----------------------------------------------------------------------
      - name: ☕ Setup Java Development Kit
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: 🎯 Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: 💾 Cache Dart Packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/.dart_tool/package_config.json
          key: ${{ runner.os }}-dart-${{ hashFiles('**/pubspec.yaml', '**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-dart-
            
      # -----------------------------------------------------------------------
      # Android SDK and Emulator Configuration
      # -----------------------------------------------------------------------
      - name: 🤖 Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: 🔧 Install Android System Images and Tools
        run: |
          echo "Installing Android SDK components..."
          
          # Accept all licenses first
          yes | sdkmanager --licenses
          
          # Install required SDK components
          sdkmanager "platforms;android-${{ env.API_LEVEL }}"
          sdkmanager "build-tools;34.0.0"
          sdkmanager "platform-tools"
          sdkmanager "emulator"
          sdkmanager "system-images;android-${{ env.API_LEVEL }};google_apis;x86_64"
          
          # Verify installations
          sdkmanager --list_installed | grep -E "(platforms|build-tools|system-images)"
          
      - name: 🔧 Configure Android Environment
        run: |
          echo "Configuring Android development environment..."
          
          # Set environment variables
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          
          # Accept licenses
          yes | flutter doctor --android-licenses || true
          
          # Validate setup
          flutter doctor -v
          
          echo "✅ Android environment configured"
          
      # -----------------------------------------------------------------------
      # Project Dependencies Installation
      # -----------------------------------------------------------------------
      - name: 📦 Install Project Dependencies
        run: |
          echo "Installing Melos and bootstrapping project..."
          dart pub global activate melos
          
          # Bootstrap with error handling
          melos bootstrap --verbose || {
            echo "Bootstrap failed, retrying with individual packages..."
            melos bootstrap --scope="packages/**" --verbose
            melos bootstrap --scope="apps/**" --verbose
          }
          
          echo "✅ Dependencies installed successfully"
          
      # -----------------------------------------------------------------------
      # Android Virtual Device Setup and Launch
      # -----------------------------------------------------------------------
      - name: 🚀 Create and Launch Android Emulator
        run: |
          echo "Setting up Android Virtual Device..."
          
          # List available system images to verify installation
          avdmanager list target
          
          # Create AVD with specific configuration
          echo no | avdmanager create avd \
            -n merkle_test_device \
            -k "system-images;android-${{ env.API_LEVEL }};google_apis;x86_64" \
            --force
            
          # Verify AVD creation
          avdmanager list avd
          
          # Configure AVD for CI optimization
          cat >> ~/.android/avd/merkle_test_device.avd/config.ini << EOF
          hw.keyboard=yes
          hw.lcd.density=240
          hw.ramSize=4096
          hw.cpu.ncore=2
          EOF
          
          # Launch emulator in headless mode
          echo "Starting Android emulator..."
          nohup $ANDROID_HOME/emulator/emulator \
            -avd merkle_test_device \
            -no-window \
            -no-audio \
            -no-snapshot \
            -wipe-data \
            -gpu swiftshader_indirect \
            -memory 4096 \
            -cores 2 \
            -netdelay none \
            -netspeed full \
            -no-boot-anim \
            -camera-back none \
            -camera-front none &
            
          # Wait for emulator to be ready with timeout
          echo "Waiting for emulator to boot (timeout: 10 minutes)..."
          timeout 600 adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\''\r'\'') ]]; do sleep 1; done'
          
          # Verify emulator is ready
          adb devices
          adb shell getprop sys.boot_completed
          
          echo "✅ Android emulator is ready"
          
      # -----------------------------------------------------------------------
      # Flutter Demo Application Build
      # -----------------------------------------------------------------------
      - name: 🏗️ Build Flutter Demo Application
        run: |
          cd apps/flutter_demo
          
          echo "Building MerkleKV Flutter demo application..."
          
          # Clean and prepare
          flutter clean
          flutter pub get
          
          # Analyze code
          flutter analyze
          
          # Build debug APK
          flutter build apk --debug --verbose
          
          # Verify APK was created
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "✅ APK build successful"
            ls -la build/app/outputs/flutter-apk/
          else
            echo "❌ APK build failed"
            exit 1
          fi
          
          cd ../..
          
      # -----------------------------------------------------------------------
      # Application Deployment and Installation
      # -----------------------------------------------------------------------
      - name: 📲 Deploy Application to Emulator
        run: |
          echo "Deploying MerkleKV demo to Android emulator..."
          
          # Install APK
          adb install -r apps/flutter_demo/build/app/outputs/flutter-apk/app-debug.apk
          
          # Verify installation
          if adb shell pm list packages | grep -q "com.example.flutter_demo_new"; then
            echo "✅ Application installed successfully"
          else
            echo "❌ Application installation failed"
            adb shell pm list packages | grep flutter || true
            exit 1
          fi
          
          # Grant necessary permissions
          adb shell pm grant com.example.flutter_demo_new android.permission.INTERNET || true
          adb shell pm grant com.example.flutter_demo_new android.permission.ACCESS_NETWORK_STATE || true
          
          echo "✅ Application deployed and configured"
          
      # -----------------------------------------------------------------------
      # Comprehensive End-to-End Testing
      # -----------------------------------------------------------------------
      - name: 🧪 Execute E2E Test Suite
        run: |
          echo "Executing comprehensive end-to-end test suite..."
          
          # Make test scripts executable
          chmod +x final_validation_test.sh
          chmod +x test_merkle_kv_manual.sh
          
          # Launch application
          echo "Launching MerkleKV demo application..."
          adb shell am start -n com.example.flutter_demo_new/.MainActivity
          
          # Wait for app to initialize
          sleep 5
          
          # Execute comprehensive validation
          echo "Running comprehensive validation tests..."
          if ./final_validation_test.sh; then
            echo "✅ Comprehensive E2E tests passed"
          else
            echo "❌ E2E tests failed, collecting debug information..."
            
            # Collect debug information
            adb shell dumpsys activity activities
            adb logcat -d | tail -50
            exit 1
          fi
          
      # -----------------------------------------------------------------------
      # Performance Testing (Optional)
      # -----------------------------------------------------------------------
      - name: ⚡ Performance Testing
        if: github.event.inputs.run_performance_tests == 'true'
        run: |
          echo "Executing performance testing suite..."
          
          # Monitor app performance
          echo "Monitoring application performance..."
          
          # Memory usage test
          for i in {1..5}; do
            MEMORY=$(adb shell dumpsys meminfo com.example.flutter_demo_new | grep "TOTAL" | awk '{print $2}')
            echo "Memory usage sample $i: ${MEMORY} KB"
            sleep 2
          done
          
          # CPU usage monitoring
          adb shell top -n 1 | grep flutter_demo_new || echo "App not found in top processes"
          
          # Network performance test
          echo "Testing MQTT connectivity performance..."
          timeout 30 adb logcat | grep -i "mqtt\|connection" || true
          
          echo "✅ Performance testing completed"
          
      # -----------------------------------------------------------------------
      # Flutter Integration Tests (if available)
      # -----------------------------------------------------------------------
      - name: 🔄 Run Flutter Integration Tests
        run: |
          cd apps/flutter_demo
          
          if [ -d "integration_test" ]; then
            echo "Running Flutter integration tests..."
            
            # Run integration tests with specific device
            flutter test integration_test/ --device-id=$(adb devices | grep emulator | cut -f1) || {
              echo "⚠️ Integration tests failed, but continuing..."
            }
          else
            echo "ℹ️ No Flutter integration tests found"
          fi
          
          cd ../..
          
      # -----------------------------------------------------------------------
      # Test Evidence Collection
      # -----------------------------------------------------------------------
      - name: 📊 Collect Test Evidence and Artifacts
        if: always()
        run: |
          echo "Collecting comprehensive test evidence..."
          
          mkdir -p android-test-evidence
          
          # Screenshots
          echo "Capturing final screenshot..."
          adb shell screencap -p /sdcard/final_screenshot.png
          adb pull /sdcard/final_screenshot.png android-test-evidence/ || true
          
          # Copy existing screenshots
          find /tmp -name "*.png" -exec cp {} android-test-evidence/ \; 2>/dev/null || true
          
          # Application logs
          echo "Collecting application logs..."
          adb logcat -d > android-test-evidence/full-logcat.txt
          adb logcat -d | grep -i "flutter\|merkle\|mqtt" > android-test-evidence/app-specific-logs.txt || true
          
          # System information
          echo "Collecting system information..."
          adb shell getprop > android-test-evidence/device-properties.txt
          adb shell dumpsys meminfo com.example.flutter_demo_new > android-test-evidence/memory-info.txt || true
          adb shell dumpsys package com.example.flutter_demo_new > android-test-evidence/package-info.txt || true
          
          # Performance data
          adb shell top -n 1 > android-test-evidence/system-performance.txt || true
          
          # Test results summary
          cat > android-test-evidence/test-summary.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "android_api_level": "${{ env.API_LEVEL }}",
            "flutter_version": "${{ env.FLUTTER_VERSION }}",
            "java_version": "${{ env.JAVA_VERSION }}",
            "commit_sha": "${{ github.sha }}",
            "workflow_run": "${{ github.run_number }}"
          }
          EOF
          
          echo "✅ Test evidence collected"
          ls -la android-test-evidence/
          
      - name: 📤 Upload Test Evidence
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-evidence-api${{ env.API_LEVEL }}
          path: android-test-evidence
          retention-days: 14
          
      # -----------------------------------------------------------------------
      # Cleanup and Resource Management
      # -----------------------------------------------------------------------
      - name: 🧹 Cleanup Resources
        if: always()
        run: |
          echo "Cleaning up Android testing resources..."
          
          # Stop application gracefully
          adb shell am force-stop com.example.flutter_demo_new || true
          
          # Uninstall test application
          adb uninstall com.example.flutter_demo_new || true
          
          # Stop emulator
          adb emu kill || true
          
          # Kill remaining emulator processes
          pkill -f emulator || true
          
          # Clean up temporary files
          rm -rf ~/.android/avd/merkle_test_device.avd || true
          
          echo "✅ Cleanup completed"

  # ===========================================================================
  # Test Results Summary and Reporting
  # ===========================================================================
  test-summary:
    name: 📋 Test Results Summary
    runs-on: ubuntu-latest
    needs: android-testing
    if: always()
    
    steps:
      - name: 📊 Generate Test Summary
        run: |
          echo "## 📱 Android Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Android API Level: ${{ env.API_LEVEL }}" >> $GITHUB_STEP_SUMMARY
          echo "- Flutter Version: ${{ env.FLUTTER_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Java Version: ${{ env.JAVA_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.android-testing.result }}" == "success" ]; then
            echo "**✅ Result: PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All Android end-to-end tests completed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "The MerkleKV Mobile application is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "**❌ Result: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Android testing encountered issues. Please review the test artifacts and logs." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Evidence:** Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
